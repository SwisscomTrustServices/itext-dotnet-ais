using System;
using AIS.Utils;

namespace AIS.Model
{
    public class UserData
    {
        public string TransactionId { get; set; }

        public string ClaimedIdentityName { get; set; }
        public string ClaimedIdentityKey { get; set; }
        public string DistinguishedName { get; set; }

        public string StepUpLanguage { get; set; }
        public string StepUpMsisdn { get; set; }
        public string StepUpMessage { get; set; }
        public string StepUpSerialNumber { get; set; }

        public string SignatureName { get; set; }
        public string SignatureReason { get; set; }
        public string SignatureLocation { get; set; }
        public string SignatureContactInfo { get; set; }

        public IConsentUrlCallback ConsentUrlCallback { get; set; }

        public bool AddTimestamp = true;
        public RevocationInformation RevocationInformation { get; set; }
        public SignatureStandard SignatureStandard { get; set; }

        public UserData(AisConfiguration configuration)
        {
            SetTransactionIdToRandomUuid();
            SetPropertiesFromConfig(configuration);
        }

        public UserData(AisConfiguration configuration, string transactionId)
        {
            TransactionId = transactionId;
            SetPropertiesFromConfig(configuration);
        }

        private void SetTransactionIdToRandomUuid()
        {
            TransactionId = Guid.NewGuid().ToString();
        }

        private void SetPropertiesFromConfig(AisConfiguration configuration)
        {
            ClaimedIdentityName = Utils.Utils.GetStringNotNull("SignatureClaimedIdentityName", configuration.SignatureClaimedIdentityName);
            ClaimedIdentityKey = configuration.SignatureClaimedIdentityKey;
            StepUpLanguage = configuration.SignatureStepUpLanguage;
            StepUpMsisdn = configuration.SignatureStepUpMsisdn;
            StepUpMessage = configuration.SignatureStepUpMessage;
            StepUpSerialNumber = configuration.SignatureStepUpSerialNumber;
            DistinguishedName =
                Utils.Utils.GetStringNotNull("SignatureDistinguishedName", configuration.SignatureDistinguishedName);
            SignatureName = configuration.SignatureName;
            SignatureReason = configuration.SignatureReason;
            SignatureLocation = configuration.SignatureLocation;
            SignatureContactInfo = configuration.SignatureContactInfo;

            string value = configuration.SignatureStandard;
            if (!string.IsNullOrEmpty(value) && SignatureStandard.SignatureStandards.Contains(configuration.SignatureStandard))
            {
                SignatureStandard = new SignatureStandard(configuration.SignatureStandard);
            }

            value = configuration.SignatureRevocationInformation;
            if (!string.IsNullOrEmpty(value) && RevocationInformation.RevocationInformations.Contains(configuration.SignatureRevocationInformation))
            {
                RevocationInformation = new RevocationInformation(configuration.SignatureRevocationInformation);
            }

            value = configuration.SignatureAddTimestamp;

            if (!bool.TryParse(configuration.SignatureAddTimestamp, out bool addTimestamp))
            {
                AddTimestamp = addTimestamp;
            }
        }

        public void Validate(SignatureMode signatureMode, Trace trace)
        {
            if (string.IsNullOrEmpty(TransactionId))
            {
                throw new Exception("The user data's transactionId cannot be null or empty. For example, you can set it to a new UUID "
                                             + "or to any other value that is unique between requests. This helps with traceability in the logs "
                                             + "generated by the AIS client");
            }

            Utils.Utils.ValueNotNull(ClaimedIdentityName, "Claimed identity must be provided", trace);

            switch (signatureMode.FriendlyName)
            {
                case SignatureMode.STATIC:
                    break;
                case SignatureMode.ON_DEMAND:
                    break;
                case SignatureMode.ON_DEMAND_STEP_UP:
                    Utils.Utils.ValueNotNull(StepUpLanguage, "The step up language must be provided", trace);
                    Utils.Utils.ValueNotNull(StepUpMessage, "The step up message must be provided", trace);
                    Utils.Utils.ValueNotNull(StepUpMsisdn, "The step up msisdn must be provided", trace);
                    break;
                case SignatureMode.TIMESTAMP:
                    break;
                default:
                    throw new Exception($"Invalid signature mode: {signatureMode.FriendlyName}");
            }
        }
    }
}
